%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Build runtime input files needed to run the Gulf of Alaska
% (GoA) region set-up for Takamitsu Ito on October 31, 2023
% Requires ouput generated by ExtractFields.m
% Generates nominal January 16, 1992 initial conditions
% Boundary conditions span January 16, 1992 to February 13,
% 2023 with obcsperiod=2615438 (~30.27 days)

% This code is best viewed using a "folding" package with the opening
% and closing folds marked by, respectively, "% {{{" and "% }}}".
% For emacs, I use folding.el available here:
% https://github.com/jaalto/project-emacs--folding-mode/blob/master/folding.el

% {{{ define desired region and initialize some variables
region_name='GoA';
minlat=41.3;
maxlat=60.5;
minlon=-160.3;
maxlon=-122.5;
NX=270;
prec='real*4';
gdir= '/nobackup/dmenemen/llc/llc_270/grid/';
pin =['/nobackup/dmenemen/ecco_darwin/' region_name '/'];
pout=['/nobackup/dmenemen/ecco_darwin/' region_name '/run_template/'];
eval(['mkdir ' pout])
% }}}

% {{{ extract indices for desired region
fnm='/nobackupp19/dmenemen/public/llc_270/iter42/input/bathy270_filled_noCaspian_r4';
[tmp fc ix jx] = ...
    quikread_llc(fnm,NX,1,prec,gdir,minlat,maxlat,minlon,maxlon);
m(1)=0;
for f=1:length(fc)
    m(f+1)=length(ix{fc(f)});
end
n=length(jx{fc(1)});
fld=zeros(sum(m),n);
for f=1:length(fc)
    fld((sum(m(1:f))+1):sum(m(1:(f+1))),:)=tmp{fc(f)};
end
% quikpcolor(fld');
[nx ny]=size(fld);
RF=-readbin([gdir 'RF.data'],51);
kx=1:min(find(RF(2:end)>max(abs(fld(:)))));
nz=length(kx);
suf1=['_' int2str(nx) 'x' int2str(ny)];
suf2=[suf1 'x' int2str(nz)];
% }}}

% {{{ Make bathymetry file
writebin([pout 'BATHY' suf1  '_' region_name],fld);
% }}}

% {{{ Create grid information files 
eval(['!cp ' pin 'grid/XC' suf1 ' ' pout 'LONC.bin'])
eval(['!cp ' pin 'grid/YC' suf1 ' ' pout 'LATC.bin'])
eval(['!cp ' pin 'grid/XG' suf1 ' ' pout 'LONG.bin'])
eval(['!cp ' pin 'grid/YG' suf1 ' ' pout 'LATG.bin'])
eval(['!cp ' pin 'grid/RAC' suf1 ' ' pout 'RA.bin'])
for fld={'DXF','DYF','DXV','DYU','DXC','DYC','DXG','DYG','RAZ','RAS','RAW'}
    eval(['!cp ' pin 'grid/' fld{1} suf1 ' ' pout fld{1} '.bin'])
end   
% }}}

% {{{ Generate initial conditions
eval(['!mkdir ' pout 'init'])
eval(['cd ' pout 'init'])
sufin=[suf1 '.19920201T000000'];
sufout=[suf1 '.16-Jan-1992'];
for fld={'ETAN', 'SIarea', 'SIheff'};
    eval(['!cp ' pin fld{1} '/' fld{1} sufin ' ' fld{1} sufout])
end
sufin=[suf2 '.19920201T000000'];
sufout=[suf2 '.16-Jan-1992'];
for fld={'THETA', 'DIC', 'NO3', 'NO2', 'NH4', 'PO4', 'FeT', 'SiO2', ...
         'DOC', 'DON', 'DOP', 'DOFe', 'POC', 'PON', 'POP', 'POFe', ...
         'POSi', 'PIC', 'ALK', 'O2', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', ...
         'c7', 'Chl1', 'Chl2', 'Chl3', 'Chl4', 'Chl5', 'SALT', 'U', 'V'}
    eval(['!cp ' pin fld{1} '/' fld{1} sufin ' ' fld{1} sufout])
end
% }}}

% {{{ Generate lateral boundary conditions
eval(['!mkdir ' pout 'obcs'])
eval(['cd ' pout 'obcs'])

% {{{ Tracer fields
for fld={'THETA', 'DIC', 'NO3', 'NO2', 'NH4', 'PO4', 'FeT', 'SiO2', ...
         'DOC', 'DON', 'DOP', 'DOFe', 'POC', 'PON', 'POP', 'POFe', ...
         'POSi', 'PIC', 'ALK', 'O2', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', ...
         'c7', 'Chl1', 'Chl2', 'Chl3', 'Chl4', 'Chl5', 'SALT'}
    disp(fld{1})
    pnm=[pin fld{1} '/'];
    fnm=dir([pnm '*' fld{1} '*01T000000']);
    for t=1:length(fnm)
        fin=[pnm fnm(t).name];
        tmp=readbin(fin,[nx ny nz]);
        
        % western boundary condition
        fout=[region_name suf2 '_' fld{1} '_West'];
        writebin(fout,squeeze(tmp(1,:,:)),1,prec,t-1)
        
        % southern boundary condition
        fout=[region_name suf2 '_' fld{1} '_South'];
        writebin(fout,squeeze(tmp(:,1,:)),1,prec,t-1)
        
    end
end
% }}}

% {{{ Horizontal velocity
hFacS=readbin([pin '/grid/hFacS' suf2],[nx ny nz]);
hFacW=readbin([pin '/grid/hFacW' suf2],[nx ny nz]);

% {{{ U
disp('U')
fnm=dir([pin 'U/U*01T000000']);
for t=1:length(fnm)
    tmp=readbin([fnm(t).folder '/' fnm(t).name],[nx ny nz]);
    
    % western boundary condition
    fout=[region_name suf2 '_U_West'];
    hFac=squeeze(hFacW(2,:,:));
    obc=squeeze(tmp(2,:,:));
    in=find(hFac);
    obc(in)=obc(in)./hFac(in);
    writebin(fout,obc,1,prec,t-1)
       
    % southern boundary condition
    fout=[region_name suf2 '_U_South'];
    hFac=squeeze(hFacW(:,1,:));
    obc=squeeze(tmp(:,1,:));
    in=find(hFac);
    obc(in)=obc(in)./hFac(in);
    writebin(fout,obc,1,prec,t-1)
end
% }}}

% {{{ V
disp('V')
fnm=dir([pin 'V/V*01T000000']);
for t=1:length(fnm)
    tmp=readbin([fnm(t).folder '/' fnm(t).name],[nx ny nz]);
    
    % western boundary condition
    fout=[region_name suf2 '_V_West'];
    hFac=squeeze(hFacS(1,:,:));
    obc=squeeze(tmp(1,:,:));
    in=find(hFac);
    obc(in)=obc(in)./hFac(in);
    writebin(fout,obc,1,prec,t-1)
       
    % southern boundary condition
    fout=[region_name suf2 '_V_South'];
    hFac=squeeze(hFacS(:,2,:));
    obc=squeeze(tmp(:,2,:));
    in=find(hFac);
    obc(in)=obc(in)./hFac(in);
    writebin(fout,obc,1,prec,t-1)
end
% }}}

% }}}

% }}}
